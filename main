import sys
import requests
from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QLineEdit, QPushButton,QHBoxLayout,QVBoxLayout
from PyQt5.QtCore import Qt
from requests import HTTPError


class WeatherApp(QWidget):
    def __init__(self):
        super().__init__()
        self.city_label = QLabel("Enter city name: ", self)
        self.city_input = QLineEdit(self)
        self.get_weather_button = QPushButton("Get Weather",self)
        self.temperature_label = QLabel(self)
        self.emoji_label = QLabel(self)
        self.description_label = QLabel( self)
        self.initUI()

    def initUI(self):
        self.setWindowTitle("Weather App")

        vbox = QVBoxLayout()
        vbox.addWidget(self.city_label)
        vbox.addWidget(self.city_input)
        vbox.addWidget(self.get_weather_button)
        vbox.addWidget(self.temperature_label)
        vbox.addWidget(self.emoji_label)
        vbox.addWidget(self.description_label)
        self.setLayout(vbox)

        self.city_label.setAlignment(Qt.AlignCenter)
        self.city_input.setAlignment(Qt.AlignCenter)
        self.temperature_label.setAlignment(Qt.AlignCenter)
        self.emoji_label.setAlignment(Qt.AlignCenter)
        self.description_label.setAlignment(Qt.AlignCenter)

        self.city_label.setObjectName("city_label")
        self.city_input.setObjectName("city_input")
        self.get_weather_button.setObjectName("get_weather_button")
        self.temperature_label.setObjectName("temperature_label")
        self.description_label.setObjectName("description_label")
        self.emoji_label.setObjectName("emoji_label")

        self.setStyleSheet("""
            QLabel{
                font-family: calibri;
            }
            QLabel#city_label{
                font-size:40px;
            }
            QLineEdit#city_input{
                font-size:40px;
            }
            QPushButton#get_weather_button{
                font-size: 30px;
                font-weight:bold
            }
            QLabel#temperature_label{
                font-size: 75px;
            }
            QLabel#emoji_label{
                font-size:100px;
                font-family:Segoe UI emoji;
            }
            QLabel#description_label{
                font-size:50px;
            }
        """)

        self.get_weather_button.clicked.connect(self.get_weather)

    def get_weather(self):
        api_key = "4c125bf5110a236af87cc22696d0ffbf" #Use your own key!
        city = self.city_input.text()
        url =f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}"
        try:
            response = requests.get(url)
            response.raise_for_status()
            data = response.json()

            if data["cod"] == 200:
                self.display_weather(data)

        except requests.exceptions.HTTPError:
            match response.status_code:
                case 400:
                    self.display_error("Bad request:\nPlease check your input")
                case 401:
                    self.display_error("Unauthorized:\nInvalid API key")
                case 403:
                    self.display_error("Forbidden:\nAccess is denied")
                case 404:
                    self.display_error("Not found:\nCity not Found")
                case 500:
                    self.display_error("Internal Sever Error:\n Please try again later")
                case 502:
                    self.display_error("Bad Gateway:\nInvalid response from server")
                case 503:
                    self.display_error("Service Unavailable:\nServer is down")
                case 504:
                    self.display_error("Gateway Timeout:\nNo response from the server")
                case _:
                    self.display_error(f"HTTP error occured")

        except requests.exceptions.ConnectionError:
            print("Connection Error\nCheck your internet connection")

        except requests.exceptions.Timeout:
            print("Timeout ERROR:\n The request timed out")

        except requests.exceptions.TooManyRedirects:
            print("Too many Redirects:\nCheck the URL")

        except requests.exceptions.RequestException:
            print(f"Request ERROR\n")

    def display_error(self,message):
        self.temperature_label.setStyleSheet("font-size:30px;"
                                             "font-family: calibri")
        self.temperature_label.setText(message)
        self.emoji_label.clear()
        self.description_label.clear()

    def display_weather(self,data):
        print(data)
        self.temperature_label.setStyleSheet("font-size:75px;")
        temperature_K = data["main"]["temp"]
        temperature_C = temperature_K - 273.15
        self.temperature_label.setText(f"{temperature_C:.0f}*C")
        weather_id = data["weather"][0]["id"]
        weather_description = data["weather"][0]["description"]
        print(weather_description)
        self.emoji_label.setText((self.get_weather_emoji(weather_id)))
        self.description_label.setText(weather_description)

    @staticmethod
    def get_weather_emoji(weather_id):
        match weather_id:
            case _ if 200 <= weather_id <= 232:
                return "⛈"
            case _ if 300 <= weather_id <= 321:
                return "🌦"
            case _ if 500 <= weather_id <= 531:
                return "🌧"
            case _ if 600 <= weather_id <= 622:
                return "❄"
            case _ if 701 <= weather_id <= 741:
                return "〰"
            case 771:
                return "💨"
            case 781:
                return "🌪"
            case 800:
                return "☀"
            case _ if 801 <= weather_id <= 804:
                return "⛅"
            case _:
                return ""


if __name__ == "__main__":
    app = QApplication(sys.argv)
    weather_app = WeatherApp()
    weather_app.show()
    sys.exit(app.exec_())
